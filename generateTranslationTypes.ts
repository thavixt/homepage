import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

// Fix for __dirname in ES modules:
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const logPrefix = '[translations-typegen]';

console.log(`${logPrefix} ⌛ Generating translation types...`);

// Directory containing locale JSON files
const localesDir = path.resolve(__dirname, './app/locales');

// Read the default locale JSON file from the locales directory
const defaultLocale = 'en';
const files = fs.readdirSync(localesDir).filter(f => f === `${defaultLocale}.json`);

// Load all key:value pairs from all locale files (assuming all have the same keys)
const interpolationMap = new Map<string, string[]>();

// Extract available interpolation keys for each translation key
files.forEach(file => {
  const filePath = path.join(localesDir, file);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
  Object.keys(content).forEach((key) => {
    const matches = Array.from(
      String(content[key]).matchAll(/{{\s*([\w.]+)\s*}}/g),
      m => m[1]
    );
    interpolationMap.set(key, matches);
  });
});

// Generate TypeScript interface
const interfaceLines = [
  `export interface Interpolations {`,
  ...Array.from(interpolationMap).map(([key, interpolationKeys]) => {
    if (interpolationKeys.length) {
      return `\t"${key}": [${interpolationKeys.map(k => `'${k}'`).join(', ')}],`;
    }
    return `\t"${key}": [],`;
  }),
  '}',
];

// Write to translations.d.ts
const outputPath = path.resolve(
  path.join(__dirname, 'app/translations.d.ts'),
);
const output = `/**
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * (created by generateTranslationTypes.ts based on \`app/locales/en.json\`)
 *
 * Provides an override for the i18next TranslationFunction with type safety for keys and interpolation keys. 
 *
 **/

${interfaceLines.join('\n')}

export type TypedTranslationFunction = <
  T extends keyof Interpolations
>(
  key: T,
  ...args: Interpolations[T] extends [] 
    ? [] 
    : [interpolationMap: Record<Interpolations[T][number], string>]
) => string;
`;
fs.writeFileSync(outputPath, output);

console.log(`${logPrefix} ✅ Updated app/translations.d.ts with ${interfaceLines.length} keys`);